-- MySQL Script generated by MySQL Workbench
-- Wed Feb  9 18:37:02 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward engineering

--SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
--SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
--SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_--ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- DATABASE PrivadasLibertad
-- -----------------------------------------------------
/*
DROP DATABASE IF EXISTS PrivadasLibertad;

CREATE DATABASE PrivadasLibertad
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'English_United States.1252'
    LC_CTYPE = 'English_United States.1252'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1;*/
	
-- -----------------------------------------------------
-- Schema crowdsourcing
-- -----------------------------------------------------
--drop schema if exists crowdsourcing cascade;
create schema if not exists crowdsourcing;
-- -----------------------------------------------------
-- table crowdsourcing.region
-- -----------------------------------------------------
--drop table if exists crowdsourcing.region;
create table if not exists crowdsourcing.region (
  idregion int not null,
  nombreregion varchar(45) null,
  primary key (idregion))
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.comuna
-- -----------------------------------------------------
--drop table crowdsourcing.comuna
create table if not exists crowdsourcing.comuna (
  idcomuna int not null,
  region_idregion int not null,
  nombrecomuna varchar(45) null,
  primary key (idcomuna),
  --index fk_comuna_region_idx (region_idregion asc) visible,
  constraint fk_comuna_region
    foreign key (region_idregion)
    references crowdsourcing.region (idregion)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.calle
-- -----------------------------------------------------
--drop table crowdsourcing.calle
create table if not exists crowdsourcing.calle (
  idcalle int not null,
  region_idregion int not null,
  comuna_idcomuna int not null,
  nombrecalle varchar(45) null,
  primary key (idcalle),
  --index fk_calle_region1_idx (region_idregion asc) visible,
  --index fk_calle_comuna1_idx (comuna_idcomuna asc) visible,
  constraint fk_calle_region1
    foreign key (region_idregion)
    references crowdsourcing.region (idregion)
    on delete no action
    on update no action,
  constraint fk_calle_comuna1
    foreign key (comuna_idcomuna)
    references crowdsourcing.comuna (idcomuna)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.direccion
-- -----------------------------------------------------
--drop table if exists crowdsourcing.direccion
create table if not exists crowdsourcing.direccion (
  iddireccion int not null,
  calle_idcalle int not null,
  region_idregion int not null,
  comuna_idcomuna int not null,
  numero varchar(45) null,
  primary key (iddireccion),
  --index fk_direccion_calle1_idx (calle_idcalle asc) visible,
  --index fk_direccion_region1_idx (region_idregion asc) visible,
  --index fk_direccion_comuna1_idx (comuna_idcomuna asc) visible,
  constraint fk_direccion_calle1
    foreign key (calle_idcalle)
    references crowdsourcing.calle (idcalle)
    on delete no action
    on update no action,
  constraint fk_direccion_region1
    foreign key (region_idregion)
    references crowdsourcing.region (idregion)
    on delete no action
    on update no action,
  constraint fk_direccion_comuna1
    foreign key (comuna_idcomuna)
    references crowdsourcing.comuna (idcomuna)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.persona
-- -----------------------------------------------------
--drop table if exists crowdsourcing.persona cascade;
create table if not exists crowdsourcing.persona (
  rut VARCHAR(14) check (rut ~ '(\d{1,3}(?:(.?)\d{3}){2}(-?)[\dkK])'),
  direccion_iddireccion int not null,
  nombrepersona varchar(45),
  apellidopersona varchar(45),
  primary key (rut),
  --index fk_persona_direccion1_idx (direccion_iddireccion asc) visible,
  constraint fk_persona_direccion1
    foreign key (direccion_iddireccion)
    references crowdsourcing.direccion (iddireccion)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.usuario
-- -----------------------------------------------------
--drop table if exists crowdsourcing.usuario
create table if not exists crowdsourcing.usuario (
  persona_rut varchar(20) not null,
  contrase√±a varchar(45) not null,
  fecharegistro date default current_date,
  ultimoinicio timestamp default current_date,
  sesioniniciada bool default false,
  tipousuario varchar(11) not null,
  nombreusuario varchar(45) unique not null,
  estaeliminado bool  default false,
  primary key (persona_rut),
  --unique index nombreusuario_unique (nombreusuario asc) visible,
  constraint fk_usuario_persona1
    foreign key (persona_rut)
    references crowdsourcing.persona (rut)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.admin
-- -----------------------------------------------------
--drop table if exists crowdsourcing.admin
create table if not exists crowdsourcing.admin (
  usuario_persona_rut varchar(20) not null,
  primary key (usuario_persona_rut),
  constraint fk_admin_usuario1
    foreign key (usuario_persona_rut)
    references crowdsourcing.usuario (persona_rut)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.institucion
-- -----------------------------------------------------
--drop table if exists crowdsourcing.institucion
--drop table crowdsourcing.institucion
create table if not exists crowdsourcing.institucion (
  idinstitucion int not null,
  direccion_iddireccion int not null,
  nombreinstitucion varchar(45),
  tipoinstitucion varchar(45),
  primary key (idinstitucion),
  --index fk_institucion_direccion1_idx (direccion_iddireccion asc) visible,
  constraint fk_institucion_direccion1
    foreign key (direccion_iddireccion)
    references crowdsourcing.direccion (iddireccion)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.verificacion
-- -----------------------------------------------------
--drop table if exists crowdsourcing.verificacion;
create table if not exists crowdsourcing.verificacion (
  idverificacion serial,
  admin_usuario_persona_rut varchar(20),
  fechaemision date default current_date,
  estadoverificacion bool default false,
  primary key (idverificacion),
  --index fk_verificacion_admin1_idx (admin_usuario_persona_rut asc) visible,
  constraint fk_verificacion_admin1
    foreign key (admin_usuario_persona_rut)
    references crowdsourcing.admin (usuario_persona_rut)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.verificador
-- -----------------------------------------------------
--drop table if exists crowdsourcing.verificador
create table if not exists crowdsourcing.verificador (
  usuario_persona_rut varchar(20) not null,
  institucion_idinstitucion int not null,
  verificacion_idverificacion int not null,
  primary key (usuario_persona_rut),
  --index fk_verificador_institucion1_idx (institucion_idinstitucion asc) visible,
  --index fk_verificador_verificacion1_idx (verificacion_idverificacion asc) visible,
  constraint fk_verificador_usuario1
    foreign key (usuario_persona_rut)
    references crowdsourcing.usuario (persona_rut)
    on delete no action
    on update no action,
  constraint fk_verificador_institucion1
    foreign key (institucion_idinstitucion)
    references crowdsourcing.institucion (idinstitucion)
    on delete no action
    on update no action,
  constraint fk_verificador_verificacion1
    foreign key (verificacion_idverificacion)
    references crowdsourcing.verificacion (idverificacion)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.informante
-- -----------------------------------------------------
--drop table if exists crowdsourcing.informante
create table if not exists crowdsourcing.informante (
  usuario_persona_rut varchar(20) not null,
  verificacion_idverificacion int not null,
  niveleducacionalinformante varchar(45),
  estadocivil varchar(45),
  estadocausa varchar(45),
  primary key (usuario_persona_rut),
  --index fk_informante_verificacion1_idx (verificacion_idverificacion asc) visible,
  constraint fk_informante_usuario1
    foreign key (usuario_persona_rut)
    references crowdsourcing.usuario (persona_rut)
    on delete no action
    on update no action,
  constraint fk_informante_verificacion1
    foreign key (verificacion_idverificacion)
    references crowdsourcing.verificacion (idverificacion)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.custodia
-- -----------------------------------------------------
--drop table if exists crowdsourcing.custodia
create table if not exists crowdsourcing.custodia (
  persona_rut varchar(20) not null,
  relacioninformante varchar(45),
  primary key (persona_rut),
  constraint fk_custodia_persona1
    foreign key (persona_rut)
    references crowdsourcing.persona (rut)
    on delete no action
    on update no action)
--engine = innodb
;

-- -----------------------------------------------------
-- table crowdsourcing.carga
-- -----------------------------------------------------
--drop table if exists crowdsourcing.carga
create table if not exists crowdsourcing.carga (
  persona_rut varchar(20) not null,
  custodia_persona_rut varchar(20) not null,
  informante_usuario_persona_rut varchar(20) not null,
  relacioninformantecarga varchar(45),
  edad int,
  niveleducativo varchar(45),
  primary key (persona_rut),
  --index fk_carga_custodia1_idx (custodia_persona_rut asc) visible,
  --index fk_carga_informante1_idx (informante_usuario_persona_rut asc) visible,
  constraint fk_carga_persona1
    foreign key (persona_rut)
    references crowdsourcing.persona (rut)
    on delete no action
    on update no action,
  constraint fk_carga_custodia1
    foreign key (custodia_persona_rut)
    references crowdsourcing.custodia (persona_rut)
    on delete no action
    on update no action,
  constraint fk_carga_informante1
    foreign key (informante_usuario_persona_rut)
    references crowdsourcing.informante (usuario_persona_rut)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.condena
-- -----------------------------------------------------
--drop table if exists crowdsourcing.condena
create table if not exists crowdsourcing.condena (
  idcondena int not null,
  informante_usuario_persona_rut varchar(20) not null,
  fechainicio date,
  duracion int,
  primary key (idcondena),
  --index fk_condena_informante1_idx (informante_usuario_persona_rut asc) visible,
  constraint fk_condena_informante1
    foreign key (informante_usuario_persona_rut)
    references crowdsourcing.informante (usuario_persona_rut)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.motivo
-- -----------------------------------------------------
--drop table if exists crowdsourcing.motivo
create table if not exists crowdsourcing.motivo (
  idmotivo int not null,
  condena_idcondena int not null,
  descripciondelito varchar(45),
  primary key (idmotivo),
  --index fk_motivo_condena1_idx (condena_idcondena asc, condena_informante_usuario_persona_rut asc) visible,
  constraint fk_motivo_condena1
    foreign key (condena_idcondena)
    references crowdsourcing.condena (idcondena)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.login
-- -----------------------------------------------------
--drop table if exists crowdsourcing.login
create table if not exists crowdsourcing.login (
  idlogin int not null,
  usuario_persona_rut varchar(20) not null,
  nombreusuariologin varchar(45),
  contrase√±alogin varchar(45),
  fechalogin timestamp default current_timestamp,
  primary key (idlogin),
  --index fk_login_usuario1_idx (usuario_persona_rut asc) visible,
  constraint fk_login_usuario1
    foreign key (usuario_persona_rut)
    references crowdsourcing.usuario (persona_rut)
    on delete no action
    on update no action)
--engine = innodb
;
--------------------------------------------------------
--------------------------------------------------------
-- -----------------------------------------------------
-- subsistemas penitenciarios solo mujeres
-- -----------------------------------------------------
--------------------------------------------------------
-- -----------------------------------------------------
-- table crowdsourcing.cerrado
-- -----------------------------------------------------
/*reate table if not exists crowdsourcing.cerrado (
  cerrado_idcerrado int not null,
  condenados_24hrs int null,
  condenados_falta int null,
  condenados_juvenil int null,
  imputados int null,
  procesados int null,
  primary key (cerrado_idcerrado),
  constraint fk_cerrado_cerrado1
    foreign key (cerrado_idcerrado)
    references crowdsourcing.cerrado (idcerrado)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.postpenitenciario
-- -----------------------------------------------------
create table if not exists crowdsourcing.postpenitenciario (
  idpostpenitenciario int not null,
  control_dl409 varchar(45) null,
  indulto_conmutativo varchar(45) null,
  oficina_diagnostico_prontuarial varchar(45) null,
  primary key (idpostpenitenciario))
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.abierto
-- -----------------------------------------------------
create table if not exists crowdsourcing.abierto (
  cerrado_idcerrado int not null,
  condenados_arresto_diurno int null,
  condenados_arresto_nocturno int null,
  libertad_condicional int null,
  scml int null,
  abiertocol int null,
  primary key (cerrado_idcerrado),
  constraint fk_abierto_cerrado1
    foreign key (cerrado_idcerrado)
    references crowdsourcing.cerrado (idcerrado)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.subsistemas
-- -----------------------------------------------------
create table if not exists crowdsourcing.subsistemas (
  idsubsistemas int not null,
  cerrado_idcerrado int not null,
  postpenitenciario_idpostpenitenciario int not null,
  abierto_idabierto int not null,
  fecha_scraping date null,
  primary key (idsubsistemas, cerrado_idcerrado, postpenitenciario_idpostpenitenciario, abierto_idabierto),
  --index fk_subsistemas_cerrado1_idx (cerrado_idcerrado asc) visible,
  --index fk_subsistemas_postpenitenciario1_idx (postpenitenciario_idpostpenitenciario asc) visible,
  --index fk_subsistemas_abierto1_idx (abierto_idabierto asc) visible,
  constraint fk_subsistemas_cerrado1
    foreign key (cerrado_idcerrado)
    references crowdsourcing.cerrado (idcerrado)
    on delete no action
    on update no action,
  constraint fk_subsistemas_postpenitenciario1
    foreign key (postpenitenciario_idpostpenitenciario)
    references crowdsourcing.postpenitenciario (idpostpenitenciario)
    on delete no action
    on update no action,
  constraint fk_subsistemas_abierto1
    foreign key (abierto_idabierto)
    references crowdsourcing.abierto (idabierto)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.metodos_alternativos
-- -----------------------------------------------------
create table if not exists crowdsourcing.metodos_alternativos (
  abierto_idabierto int not null,
  remision_condicional_pena int null,
  libertad_vigilada_adulto int null,
  reclusion_nocturna int null,
  remision_condicional int null,
  libertad_vigilada int null,
  libertad_vigilada_intensiva int null,
  reclusion_parcial int null,
  psbc int null,
  expulsion int null,
  reclusion_domiciliaria int null,
  primary key (abierto_idabierto),
  constraint fk_metodos_alternativos_abierto1
    foreign key (abierto_idabierto)
    references crowdsourcing.abierto (idabierto)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.cerrado
-- -----------------------------------------------------
create table if not exists crowdsourcing.cerrado (
  cerrado_idcerrado int not null,
  condenados_24hrs int null,
  condenados_falta int null,
  condenados_juvenil int null,
  imputados int null,
  procesados int null,
  primary key (cerrado_idcerrado),
  constraint fk_cerrado_cerrado1
    foreign key (cerrado_idcerrado)
    references crowdsourcing.cerrado (idcerrado)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.semiabierto
-- -----------------------------------------------------
create table if not exists crowdsourcing.semiabierto (
  cerrado_idcerrado int not null,
  condenados_cet_semiabierto int null,
  primary key (cerrado_idcerrado),
  constraint fk_semiabierto_cerrado1
    foreign key (cerrado_idcerrado)
    references crowdsourcing.cerrado (idcerrado)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.penas_sustitutivas
-- -----------------------------------------------------
create table if not exists crowdsourcing.penas_sustitutivas (
  abierto_idabierto int not null,
  domiciliaria_1_2_3_11_primero int null,
  domiciliaria_11_segundo int null,
  domiciliaria_nocturna_art4 int null,
  domiciliaria_nocturna_art5 int null,
  primary key (abierto_idabierto),
  constraint fk_metodos_alternativos_abierto2
    foreign key (abierto_idabierto)
    references crowdsourcing.abierto (idabierto)
    on delete no action
    on update no action)
--engine = innodb
;


-- -----------------------------------------------------
-- table crowdsourcing.abierto
-- -----------------------------------------------------
create table if not exists crowdsourcing.abierto (
  cerrado_idcerrado int not null,
  condenados_arresto_diurno int null,
  condenados_arresto_nocturno int null,
  libertad_condicional int null,
  scml int null,
  abiertocol int null,
  primary key (cerrado_idcerrado),
  constraint fk_abierto_cerrado1
    foreign key (cerrado_idcerrado)
    references crowdsourcing.cerrado (idcerrado)
    on delete no action
    on update no action)
--engine = innodb
;
*/

--set sql_mode=@old_sql_mode;
--set foreign_key_checks=@old_foreign_key_checks;
--set unique_checks=@old_unique_checks;
